{"version":3,"sources":["store/actions.ts","store/saga.ts","store/rootSaga.ts","helpers/CardHelpers.ts","store/index.tsx","components/Header/style.ts","components/Header/index.tsx","components/Card/style.ts","components/Card/index.tsx","pages/GamePage/style.ts","helpers/TimeHelpers.ts","components/Popover/style.ts","components/Popover/index.tsx","pages/MenuPage/style.ts","components/IconBar/style.ts","components/IconBar/index.tsx","components/Highscores/style.ts","components/Highscores/index.tsx","pages/HighscoresPage/style.ts","index.tsx","pages/MenuPage/index.tsx","pages/GamePage/index.tsx","pages/HighscoresPage/index.tsx"],"names":["actions","cardClicked","createAction","cardFlipped","flipCard","difficultyChanged","usernameSet","gameFinished","loadCards","cardClickedSaga","payload","put","id","delay","console","log","rootSaga","all","takeEvery","getType","generateEasyModeCards","n","complete","map","cv","value","toString","flipped","sort","Math","random","slice","flatMap","i","uuidv4","persistConfig","key","storage","blacklist","persistedReducer","persistReducer","state","cards","flippedCards","comparisonCard","undefined","difficulty","username","leaderboards","action","produce","draft","type","card","find","otherCard","mode","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","persistStore","useTypedSelector","useSelector","Container","styled","div","Header","minutes","seconds","src","process","alt","Card","animated","CardFront","CardBack","CardBGImage","attrs","props","cardvalue","CardContainer","React","memo","onClick","useSpring","opacity","transform","config","mass","tension","friction","style","interpolate","o","t","PageContainer","Grid","convertMinutesAndSeconds","Popover","time","onPlayAgainClick","onHighscoresClick","ReactDOM","createPortal","document","body","Form","form","ErrorText","p","IconBar","Table","table","Highscores","filter","scores","header","score","a","b","s","index","Date","date","toISOString","substring","Wrapper","rootElement","getElementById","render","StrictMode","basename","exact","path","component","history","useHistory","dispatch","useDispatch","name","useState","setUsername","errorText","setErrorText","selectedDifficulty","changeDifficulty","useEffect","onSubmit","push","onChange","e","target","option","handleClick","useStopwatch","autoStart","pause","cardsFlipped","length","isVisible","setIsVisible","options"],"mappings":"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","file":"static/js/main.3d0640c5.chunk.js","sourcesContent":["import { ActionType, createAction } from \"typesafe-actions\";\nimport { Card, DifficultyType, Score } from \"./types\";\n\nconst cardClicked = createAction(\"Card Clicked\")<Card>();\nconst cardFlipped = createAction(\"Card Flipped\")<string>();\nconst flipCard = createAction(\"Flip Card\")<string>();\nconst difficultyChanged = createAction(\"Difficulty Changed\")<DifficultyType>();\nconst usernameSet = createAction(\"Username Set\")<string>();\nconst gameFinished = createAction(\"Game finished\")<Score>();\nconst loadCards = createAction(\"Load Cards\")<DifficultyType>();\n\n\nexport const actions = {\n  cardClicked,\n  cardFlipped,\n  flipCard,\n  difficultyChanged,\n  usernameSet,\n  gameFinished,\n  loadCards\n};\n\nexport type Actions = ActionType<typeof actions>;\n","import { put, delay } from \"@redux-saga/core/effects\";\nimport { actions } from \"./actions\";\n\nexport function* cardClickedSaga({ payload }:any) {\n  try {\n      yield put(actions.flipCard(payload.id));\n      yield delay(1000);\n      yield (put(actions.cardFlipped(payload.id)));\n  } catch (error) {\n    console.log(error);\n  }\n}","import { getType } from \"typesafe-actions\";\nimport { all, takeEvery } from \"@redux-saga/core/effects\";\nimport { actions } from \"./actions\";\nimport { cardClickedSaga } from \"./saga\";\n\n\nexport function* rootSaga() {\n  yield all([takeEvery(getType(actions.cardClicked), cardClickedSaga)]);\n}\n","import { v4 as uuidv4 } from \"uuid\";\n\nexport const generateCards = () => {\n  const cards = [1,2,3,4,5,6,7,8, 9];\n\n  return cards.map(\n    (cv) => ({ value: cv.toString(), flipped: false })\n  );;\n};\n\nexport const generateEasyModeCards = (n:number) => {\n    const cards = generateCards();\n    const shuffled = cards.sort(() => 0.5 - Math.random());\n    const selected = shuffled.slice(0, n);\n    const duplicated = selected.flatMap(i => [i,i]);\n    const complete = duplicated.map(\n        (cv) => ({...cv, id:uuidv4()})\n      );\n      console.log(complete)\n    return complete.sort(() => 0.5 - Math.random());\n}","import { Actions, actions } from \"./actions\";\nimport { Reducer, createStore, applyMiddleware } from \"redux\";\nimport { TypedUseSelectorHook, useSelector } from \"react-redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport produce from \"immer\";\nimport { getType } from \"typesafe-actions\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\nimport { Card, DifficultyType, Score } from \"./types\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { rootSaga } from \"./rootSaga\";\nimport { generateEasyModeCards } from \"../helpers/CardHelpers\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  blacklist: [\"cards\", \"flippedCards\", \"comparisonCard\", \"difficulty\"],\n};\n\nconst initialState = () => ({\n  cards: [] as Card[],\n  flippedCards: [] as string[],\n  comparisonCard: undefined as undefined | Card,\n  difficulty: \"Easy\" as DifficultyType,\n  username: undefined as undefined | string,\n  leaderboards: [] as Score[],\n});\n\nexport type State = Readonly<ReturnType<typeof initialState>>;\n\nexport const rootReducer: Reducer<State, Actions> = (\n  state = initialState(),\n  action: Actions\n) =>\n  produce(state, (draft) => {\n    switch (action.type) {\n      case getType(actions.cardFlipped): {\n        const card = draft.cards.find((card) => card.id === action.payload);\n        if (card) {\n          if (!draft.comparisonCard) {\n            draft.comparisonCard = card;\n          } else {\n            if (card.value === draft.comparisonCard.value) {\n              draft.flippedCards = [\n                ...draft.flippedCards,\n                card.id,\n                draft.comparisonCard.id,\n              ];\n            } else {\n              card.flipped = false;\n              const otherCard = draft.cards.find(\n                (card) => card.id === draft.comparisonCard?.id\n              );\n              if (otherCard) otherCard.flipped = false;\n            }\n            draft.comparisonCard = undefined;\n          }\n        }\n        break;\n      }\n      case getType(actions.flipCard): {\n        const card = draft.cards.find((card) => card.id === action.payload);\n        if (card) {\n          card.flipped = !card.flipped;\n        }\n        break;\n      }\n      case getType(actions.difficultyChanged): {\n        draft.difficulty = action.payload;\n        break;\n      }\n      case getType(actions.usernameSet): {\n        draft.username = action.payload;\n        break;\n      }\n      case getType(actions.gameFinished): {\n        draft.leaderboards = [...draft.leaderboards, action.payload];\n        break;\n      }\n      case getType(actions.loadCards): {\n        draft.comparisonCard = undefined;\n        draft.flippedCards = [];\n        draft.difficulty = action.payload;\n        const mode = action.payload;\n        console.log(mode);\n        switch (mode) {\n          case \"Easy\":\n            draft.cards = generateEasyModeCards(4);\n            break;\n\n          case \"Medium\":\n            draft.cards = generateEasyModeCards(6);\n            break;\n\n          case \"Hard\":\n            draft.cards = generateEasyModeCards(9);\n            break;\n        }\n\n        break;\n      }\n    }\n  });\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\nconst sagaMiddleware = createSagaMiddleware();\nexport const store = createStore(\n  persistedReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\n);\nsagaMiddleware.run(rootSaga);\n//@ts-ignore\nexport const persistor = persistStore(store); // bad practice with the ignore above, but typescript error was taking up too much time.\n\nexport const useTypedSelector: TypedUseSelectorHook<State> = useSelector;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  padding: 10px 20px;\n  background: #fff;\n  color: #0000;\n  box-shadow: 0px 2px 4px -1px rgb(0 0 0 / 20%),\n    0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%);\n  z-index: 1;\n  justify-content: space-between;\n  align-items:center;\n  color: #fff;\n  img {\n    height: 50px;\n    margin-right:10px;\n  }\n\n  span,\n  div {\n    display: flex;\n    align-items: center;\n    p:first-child {\n      margin-right: 10px;\n    }\n  }\n  h3,h2, p {\n    margin: 0;\n    color:#000;\n  }\n\n  @media (max-width: 550px) {\n    //   hide logo/icon when on small screen\n    div {\n      display: none;\n      background: green;\n    }\n  }\n`;\n","import React from \"react\";\nimport { useTypedSelector } from \"../../store\";\nimport { Container } from \"./style\";\n\nexport const Header: React.FC<{ minutes: number; seconds: number }> = ({\n  minutes,\n  seconds,\n}) => {\n  const difficulty = useTypedSelector((state) => state.difficulty);\n  const username = useTypedSelector((state) => state.username);\n\n  return (\n    <Container>\n      <div>\n        <img src={process.env.PUBLIC_URL + \"/icons/4.svg\"} alt=\"fruit icon\" />\n        <h2>Memory Game</h2>\n      </div>\n      <h3>{`${minutes}:${seconds}`}</h3>\n      <span>\n        <p>{`Playing as: ${username}`}</p>\n        <p>{`Mode: ${difficulty}`}</p>\n      </span>\n    </Container>\n  );\n};\n","import styled from \"styled-components\";\nimport { animated } from \"react-spring\";\n\nconst Card = styled(animated.div)`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n  will-change: transform, opacity;\n  background-size: cover;\n`;\n\nexport const CardFront = styled(Card)`\n  background-position: center;\n  background-size: contain;\n  background-repeat: no-repeat;\n  background: #af2739;\n`;\n\nexport const CardBack = styled(Card)`\n  background-image: url(${process.env.PUBLIC_URL + \"/icons/logo.svg\"});\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: center;\n`;\n\nexport const CardBGImage = styled(Card).attrs<{\n  cardvalue: string;\n}>((props) => ({}))<{ cardvalue: string }>`\n  // background-image: url(\"/icons/${(props) => props.cardvalue}.svg\");\n  background-image: url(${props => process.env.PUBLIC_URL + \"/icons/\" + props.cardvalue + \".svg\"});\n  background-position: center;\n  background-size: contain;\n  background-repeat: no-repeat;\n  position: relative;\n  width: 60%;\n  margin: 0 auto;\n`;\n\nexport const CardContainer = styled.div`\n  height: 100%;\n  width: 100%;\n  position: relative;\n  border: 1px solid #fff;\n`;\n","import React from \"react\";\nimport { useSpring } from \"react-spring\";\nimport { CardContainer, CardBack, CardBGImage, CardFront } from \"./style\";\nimport { Card as CardType } from \"./../../store/types\";\n\nexport const Card: React.FC<{\n  card: CardType;\n  onClick: (card: CardType) => void;\n}> = React.memo(({ card, onClick }) => {\n  const { transform, opacity } = useSpring({\n    opacity: card.flipped ? 1 : 0,\n    transform: `perspective(600px) rotateX(${card.flipped ? 180 : 0}deg)`,\n    config: { mass: 5, tension: 500, friction: 80 },\n  });\n\n  return (\n    <CardContainer onClick={() => onClick(card)}>\n      <CardBack\n        style={{\n          // @ts-ignore\n          opacity: opacity.interpolate((o) => 1 - o),\n          transform,\n        }}\n      />\n      <CardFront\n        style={{\n          opacity,\n          transform: transform.interpolate((t) => `${t} rotateX(180deg)`),\n        }}\n      >\n        <CardBGImage cardvalue={card.value} />\n      </CardFront>\n    </CardContainer>\n  );\n});\n","import styled from \"styled-components\";\nimport { DifficultyType } from \"../../store/types\";\nexport const PageContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100vw;\n  height: 100vh;\n`;\n\nexport const Grid = styled.div.attrs<{\n  mode: DifficultyType;\n}>((props) => ({}))<{ mode: DifficultyType }>`\n  display: grid;\n  grid-template-columns: ${(props) => props.mode === \"Hard\" ? \"1fr 1fr 1fr 1fr 1fr 1fr\": \"1fr 1fr 1fr 1fr\"};\n  grid-template-rows:  ${(props) => props.mode === \"Easy\" ? \"1fr 1fr\": \"1fr 1fr 1fr\"};\n  gap: 0px 0px;\n  grid-template-areas:\n    \". . . .\"\n    \". . . .\";\n  flex: 1;\n  background: #66929e;\n`;\n","export const convertMinutesAndSeconds = (minutes:number, seconds:number):number => {\n    return (minutes*60 + seconds);\n}\n\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\nposition: fixed;\nz-index:10;\nwidth:100%;\nheight:100%;\nbackground: rgba(0,0,0,0.8);\ncolor:#fff;\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\njustify-content: center;\n\nbutton{\n    background: #af2739;\n    border: none;\n    color: #fff;\n    text-transform: uppercase;\n    letter-spacing: 0.02857em;\n    flex: 1;\n    cursor: pointer;\n    padding:8px 16px;\n}\n\nbutton:first-child {\n    margin-right: 5px;\n    background: #66929e;\n  }\n  button:last-child {\n    margin-left: 5px;\n  }\n  h1{\n      margin:0;\n  }\n`;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Container } from \"./style\";\n\nexport const Popover: React.FC<{\n  time: number;\n  onPlayAgainClick: () => void;\n  onHighscoresClick: () => void;\n}> = ({ time, onPlayAgainClick, onHighscoresClick }) => {\n  return ReactDOM.createPortal(\n    <Container>\n      <h1>Game Over</h1>\n      <h3>You scored: {time}</h3>\n      <span>\n        <button onClick={onHighscoresClick}>View High Scores</button>\n        <button onClick={onPlayAgainClick}>Play Again</button>\n      </span>\n    </Container>,\n    document.body\n  );\n};\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  flex: 1;\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  min-width: 300px;\n  padding: 20px;\n  background: white;\n  box-shadow: rgb(0 0 0 / 20%) 1px 7px 14px -5px;\n  label,\n  input,\n  button,\n  select {\n    margin: 0 0 10px 0;\n  }\n  button,\n  input,\n  select {\n    padding: 8px 16px;\n  }\n\n  label {\n    color: rgba(0, 0, 0, 0.54);\n  }\n  h1 {\n    font-size: 3rem;\n    font-family: \"Roboto\", \"Helvetica\", \"Arial\", sans-serif;\n    font-weight: 400;\n    line-height: 1.167;\n    letter-spacing: 0em;\n    margin: 0;\n    text-align: center;\n  }\n  h3 {\n    font-weight: lighter;\n  }\n  span {\n    display: flex;\n    button {\n      background: #af2739;\n      border: none;\n      color: #fff;\n      text-transform: uppercase;\n      letter-spacing: 0.02857em;\n      flex: 1;\n      cursor: pointer;\n    }\n    button:first-child {\n      margin-right: 5px;\n      background: #66929e;\n    }\n    button:last-child {\n      margin-left: 5px;\n    }\n  }\n`;\n\nexport const ErrorText = styled.p`\n  margin: 0 0 5px 0;\n  color: red;\n`;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: space-between;\n  img {\n    height: 50px;\n  }\n`;\n","import React from \"react\";\nimport { Container } from \"./style\";\n\nexport const IconBar = () => {\n  return (\n    <Container>\n      <img src={process.env.PUBLIC_URL + \"/icons/1.svg\"} alt=\"fruit icon\" />\n      <img src={process.env.PUBLIC_URL + \"/icons/2.svg\"} alt=\"fruit icon\" />\n      <img src={process.env.PUBLIC_URL + \"/icons/3.svg\"} alt=\"fruit icon\" />\n      <img src={process.env.PUBLIC_URL + \"/icons/4.svg\"} alt=\"fruit icon\" />\n      <img src={process.env.PUBLIC_URL + \"/icons/5.svg\"} alt=\"fruit icon\" />\n      <img src={process.env.PUBLIC_URL + \"/icons/6.svg\"} alt=\"fruit icon\" />\n      <img src={process.env.PUBLIC_URL + \"/icons/7.svg\"} alt=\"fruit icon\" />\n      <img src={process.env.PUBLIC_URL + \"/icons/8.svg\"} alt=\"fruit icon\" />\n    </Container>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const Table = styled.table`\n  border-collapse: collapse;\n  width: 100%;\n  margin-bottom:10px;\n\n  td,\n  th {\n    border: 1px solid #ddd;\n    padding: 8px;\n  }\n\n  tr:nth-child(even) {\n    background-color: #f2f2f2;\n  }\n\n  tr:hover {\n    background-color: #ddd;\n  }\n\n  th {\n    padding-top: 12px;\n    padding-bottom: 12px;\n    text-align: left;\n    background-color: #66929e;\n    color: white;\n  }\n`;\n","import { DifficultyType, Score } from \"../../store/types\";\nimport { Table } from \"./style\";\n\nexport const Highscores: React.FC<{\n  filter: DifficultyType;\n  scores: Score[];\n}> = ({ filter, scores }) => {\n  const headers = [\"Place\", \"Username\", \"Score\", \"Date\"];\n  return (\n    <Table>\n      <tr>\n        {headers.map((header) => (\n          <th>{header}</th>\n        ))}\n      </tr>\n      {scores\n        .filter((score) => score.mode === filter)\n        .sort((a, b) => (a.time > b.time ? 1 : -1))\n        .slice(0, 10)\n        .map((s, index) => (\n          <tr>\n            <td>{index + 1}</td>\n            <td>{s.username}</td>\n            <td>{s.time}</td>\n            <td>{new Date(s.date).toISOString().substring(0, 10)}</td>\n          </tr>\n        ))}\n    </Table>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  flex: 1;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-width: 300px;\n  padding: 20px;\n  background: white;\n  box-shadow: rgb(0 0 0 / 20%) 1px 7px 14px -5px;\n  label,\n  select,\n  button {\n    margin: 0 0 10px 0;\n  }\n  button,\n  select,\n  input {\n    padding: 8px 16px;\n  }\n  label {\n    color: rgba(0, 0, 0, 0.54);\n    margin: 20px 0 5px 0;\n  }\n  h1 {\n    font-size: 3rem;\n    font-family: \"Roboto\", \"Helvetica\", \"Arial\", sans-serif;\n    font-weight: 400;\n    line-height: 1.167;\n    letter-spacing: 0em;\n    margin: 0;\n    text-align: center;\n  }\n  h3 {\n    font-weight: lighter;\n    text-align:center;\n  }\n\n  button {\n    background: #af2739;\n    border: none;\n    color: #fff;\n    text-transform: uppercase;\n    letter-spacing: 0.02857em;\n    flex: 1;\n    cursor: pointer;\n  }\n\n  p{\n    font-style:italic;\n    text-align:center;\n  }\n\n`;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { GamePage } from \"./pages/GamePage\";\nimport { store } from \"./store\";\nimport { Route, HashRouter } from \"react-router-dom\";\nimport \"./style.css\";\nimport { MenuPage } from \"./pages/MenuPage\";\nimport { HighscoresPage } from \"./pages/HighscoresPage\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter basename={process.env.PUBLIC_URL}>\n        <Route exact path=\"/\" component={MenuPage} key={1} />\n        <Route exact path=\"/Play\" component={GamePage} key={2} />\n        <Route exact path=\"/Scores\" component={HighscoresPage} key={3} />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  rootElement\n);\n","import React, { useEffect } from \"react\";\nimport { Container, ErrorText, Form } from \"./style\";\nimport { DifficultyType } from \"./../../store/types\";\nimport { actions } from \"../../store/actions\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { useTypedSelector } from \"../../store\";\nimport { IconBar } from \"../../components/IconBar\";\n\nexport const MenuPage = () => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const mode = useTypedSelector((state) => state.difficulty);\n  const name = useTypedSelector((state) => state.username);\n  const cards = useTypedSelector((state) => state.cards);\n  const options = [\"Easy\", \"Medium\", \"Hard\"] as DifficultyType[];\n  const [username, setUsername] = React.useState(name ? name : \"\");\n  const [errorText, setErrorText] = React.useState(\"\");\n  const [selectedDifficulty, changeDifficulty] = React.useState(\n    mode as DifficultyType\n  );\n\n  const handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    changeDifficulty(e.target.value as DifficultyType);\n    dispatch(actions.difficultyChanged(e.target.value as DifficultyType));\n  };\n\n  const handleSubmit = () => {\n    if (username) {\n      dispatch(actions.usernameSet(username));\n      dispatch(actions.loadCards(selectedDifficulty));\n      history.push(\"/Play\");\n    } else {\n      setErrorText(\"Please select a username\");\n    }\n  };\n\n  useEffect(() => {\n    if (username && errorText) {\n      setErrorText(\"\");\n    }\n  }, [username, errorText]);\n\n  useEffect(() => {\n    if (cards) {\n      dispatch(actions.loadCards(selectedDifficulty));\n    }\n    // eslint-disable-next-line\n  }, [selectedDifficulty]);\n\n  return (\n    <Container>\n      <Form onSubmit={handleSubmit}>\n        <h1>Memory Game</h1>\n        <IconBar />\n        <h3>Match the cards as fast as possible - quickest time wins</h3>\n        <label>Username</label>\n        {errorText && <ErrorText>{errorText}</ErrorText>}\n        <input\n          value={username}\n          onChange={(e) => setUsername(e.target.value)}\n        ></input>\n        <label>Difficulty</label>\n        <select onChange={handleChange} value={selectedDifficulty}>\n          {options.map((option) => (\n            <option key={option} value={option}>\n              {option}\n            </option>\n          ))}\n        </select>\n        <span>\n          <button type=\"button\" onClick={() => history.push(\"/Scores\")}>\n            View highscores\n          </button>\n          <button type=\"submit\">Start game</button>\n        </span>\n      </Form>\n    </Container>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Header } from \"../../components/Header\";\nimport { useTypedSelector } from \"../../store\";\nimport { actions } from \"../../store/actions\";\nimport { Card as CardType } from \"../../store/types\";\nimport { Card } from \"./../../components/Card\";\nimport { Grid, PageContainer } from \"./style\";\nimport { useStopwatch } from \"react-timer-hook\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { convertMinutesAndSeconds } from \"../../helpers/TimeHelpers\";\nimport { useHistory } from \"react-router-dom\";\nimport { Popover } from \"../../components/Popover\";\n\nexport const GamePage = () => {\n  const cards = useTypedSelector((state) => state.cards);\n  const dispatch = useDispatch();\n  const handleClick = (card: CardType) => {\n    if (!card.flipped) {\n      dispatch(actions.cardClicked(card));\n    }\n  };\n  const history = useHistory();\n  const { seconds, minutes, pause } = useStopwatch({ autoStart: true });\n  const username = useTypedSelector((state) => state.username);\n  const mode = useTypedSelector((state) => state.difficulty);\n  const cardsFlipped = useTypedSelector((state) => state.flippedCards.length);\n  const [isVisible, setIsVisible] = React.useState(false);\n\n  useEffect(() => {\n    if (cardsFlipped > 0 && cardsFlipped === cards.length) {\n      pause();\n      dispatch(\n        actions.gameFinished({\n          id: uuidv4(),\n          time: convertMinutesAndSeconds(minutes, seconds),\n          username: username ?? \"undefined\",\n          date: new Date().toISOString(),\n          mode: mode,\n        })\n      );\n      setIsVisible(true);\n    }\n    // eslint-disable-next-line\n  }, [cardsFlipped, cards]);\n\n  useEffect(() => {\n    if (cards.length === 0) history.push(\"/\");\n    // eslint-disable-next-line\n  }, [cards]);\n  return (\n    <PageContainer>\n      <Header minutes={minutes} seconds={seconds} />\n      <Grid mode={mode}>\n        {cards.map((card) => (\n          <Card key={card.id} card={card} onClick={handleClick} />\n        ))}\n      </Grid>\n      {isVisible && (\n        <Popover\n          time={convertMinutesAndSeconds(minutes, seconds)}\n          onPlayAgainClick={() => history.push(\"/\")}\n          onHighscoresClick={() => history.push(\"/Scores\")}\n        />\n      )}\n    </PageContainer>\n  );\n};\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Highscores } from \"../../components/Highscores\";\nimport { IconBar } from \"../../components/IconBar\";\nimport { useTypedSelector } from \"../../store\";\nimport { DifficultyType } from \"../../store/types\";\nimport { Wrapper, Container } from \"./style\";\n\nexport const HighscoresPage = () => {\n  const scores = useTypedSelector((state) => state.leaderboards);\n  const options = [\"Easy\", \"Medium\", \"Hard\"] as DifficultyType[];\n  const [selectedDifficulty, changeDifficulty] = React.useState(\n    options[0] as DifficultyType\n  );\n  const history = useHistory();\n  return (\n    <Wrapper>\n      <Container>\n        <h1>Highscores</h1>\n        <h3>Top 10 Leaderboard</h3>\n        <IconBar />\n        <label>Difficulty</label>\n        <select\n          onChange={(e) => changeDifficulty(e.target.value as DifficultyType)}\n          value={selectedDifficulty}\n        >\n          {options.map((option) => (\n            <option key={option} value={option}>\n              {option}\n            </option>\n          ))}\n        </select>\n        {selectedDifficulty &&\n        scores.length &&\n        scores.filter((score) => score.mode === selectedDifficulty).length ? (\n          <Highscores filter={selectedDifficulty} scores={scores} />\n        ) : (\n          <p>No highscores found</p>\n        )}\n\n        <button onClick={() => history.push(\"/\")}>Back to start menu</button>\n      </Container>\n    </Wrapper>\n  );\n};\n"],"sourceRoot":""}